\b Description 
Following diagram illustrates the interactions performed between the Host and the target STSE device during the API execution
\n\n

@startuml
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST $STSE_ACTIVITY
    group stse_aes_ccm_decrypt
        
        HOST -> STSE : AES CCM* decrypt (slot_number, ciphertext, associated_data, nonce, mac)  
        activate STSE $STSE_ACTIVITY
        return plaintext, verification result

    end 
	deactivate HOST
@enduml

\n\n \b Use-case \b example 
\n The following applicative code snippet illustrates how to use this API function in main application.
\n\n

\code{.c}

	stse_ReturnCode_t ret;
	PLAT_UI8 associated_data[]      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
	PLAT_UI8 associated_data_length = 8;
	PLAT_UI8 plaintextLength    	= 24;
	PLAT_UI8 nonce[]              	= {0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0xA0,
									   0xA1, 0xA2, 0xA3, 0xA4, 0xA5};
	PLAT_UI8 mac[]      			= {0xA0, 0x91, 0xD5, 0x6E, 0x10, 0x40, 0x09, 0x16};
	PLAT_UI8 macLength          	= 8;
	PLAT_UI8 ciphertext[] 		    = {0x72, 0xC9, 0x1A, 0x36, 0xE1, 0x35, 0xF8, 0xCF,
									   0x29, 0x1C, 0xA8, 0x94, 0x08, 0x5C, 0x87, 0xE3,
									   0xCC, 0x15, 0xC4, 0x39, 0xC9, 0xE4, 0x3A, 0x3B};
	PLAT_UI8 verification_result 	= 0;
	PLAT_UI8 plaintext[plaintextLength];

	ret = stse_aes_ccm_decrypt(pStse_handler,
			slot_number,
			macLength,
			nonce,
			associated_data_length,
			associated_data,
			plaintextLength,
			ciphertext,
			mac,
			&verification_result,
			plaintext);

	if(ret != STSE_OK )
	{
		/* Handle Error */
	}

\endcode

\sa stse_init

<div style="page-break-after: always;"></div>